terraform {
  required_providers {
    azuread = {
      source  = "hashicorp/azuread"
      version = "~> 2.0"
    }
  }
}

provider "azuread" {
  client_id     = var.client_id
  client_secret = var.client_secret
  tenant_id     = var.tenant_id
}

# Terraform variables
variable "client_id" {
  description = "Azure AD Client ID"
  type        = string
}

variable "client_secret" {
  description = "Azure AD Client Secret"
  type        = string
  sensitive   = true
}

variable "tenant_id" {
  description = "Azure AD Tenant ID"
  type        = string
}

variable "config_file" {
  description = "Path to config file containing group names"
  type        = string
}

# Fetch Azure AD app names using PowerShell
data "external" "fetch_apps" {
  program = ["powershell", "-Command", <<EOT
    $clientId = "${var.client_id}"
    $clientSecret = "${var.client_secret}"
    $tenantId = "${var.tenant_id}"

    # Login using SPN
    az login --service-principal --username $clientId --password $clientSecret --tenant $tenantId --only-show-errors | Out-Null

    # Fetch filtered app names and app IDs
    $apps = az ad app list --all --query "[?starts_with(displayName, 'ADP Azure') || starts_with(displayName, 'ADP AWS')].{Name:displayName, AppId:appId, Roles:appRoles}" --output json | ConvertFrom-Json

    # Convert to Terraform-friendly JSON format
    $appNames = ($apps | ForEach-Object { $_.Name }) -join ","
    $appIds = ($apps | ForEach-Object { $_.AppId }) -join ","
    $appRoles = ($apps | ForEach-Object { ($_.Roles | Select-Object -First 1).id }) -join ","
    
    @{"app_names" = "$appNames"; "app_ids" = "$appIds"; "app_roles" = "$appRoles"} | ConvertTo-Json -Compress
  EOT
  ]
}

# Convert the comma-separated output into lists
locals {
  app_ids_list   = split(",", data.external.fetch_apps.result.app_ids)
  app_roles_list = split(",", data.external.fetch_apps.result.app_roles)

  # Read group names from a file and remove empty lines
  content_lines  = file(var.config_file)
  filtered_lines = split("\n", local.content_lines)
  group_names    = [for line in local.filtered_lines : trimspace(line) if trimspace(line) != ""]
}

# Fetch Azure AD groups based on group names
data "azuread_group" "group" {
  for_each     = toset(local.group_names)
  display_name = each.value
}

# Assign ALL groups to EACH app
resource "azuread_app_role_assignment" "group_assignment" {
  for_each = { for idx, app_id in local.app_ids_list : app_id => idx }

  principal_object_id = data.azuread_group.group[each.key].object_id  # Assign group ID
  resource_object_id  = each.value  # App ID
  app_role_id         = local.app_roles_list[each.value]  # First app role of the app
}
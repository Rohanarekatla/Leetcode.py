# Fetch enterprise apps (AD AWS/AD Azure)
data "external" "fetch_apps" {
  program = ["powershell", "-Command", <<EOT
  $clientId = "${var.client_id}"
  $clientSecret = "${var.client_secret}"
  $tenantId = "${var.tenant_id}"

  az login --service-principal -u $clientId -p $clientSecret --tenant $tenantId --only-show-errors | Out-Null
  $apps = az ad app list --all --query "[?starts_with(displayName, 'AD Azure') || starts_with(displayName, 'AD AWS')].displayName" -o json
  $appNames = ($apps | ConvertFrom-Json) -join ","
  @{ "app_names" = "$appNames" } | ConvertTo-Json -Compress
  EOT
  ]
}

# Get groups from input file
locals {
  app_names_list = split(",", data.external.fetch_apps.result.app_names)
  group_names    = compact([for line in split("\n", file(var.config_file)) : trimspace(line)])
}

# Fetch Azure AD groups
data "azuread_group" "groups" {
  for_each     = toset(local.group_names)
  display_name = each.value
}

# Fetch enterprise apps as service principals
data "azuread_service_principal" "enterprise_apps" {
  for_each     = toset(local.app_names_list)
  display_name = each.value
}

# Get existing assignments using Microsoft Graph API
data "external" "existing_assignments" {
  for_each = data.azuread_service_principal.enterprise_apps

  program = ["powershell", "-Command", <<EOT
  $clientId = "${var.client_id}"
  $clientSecret = "${var.client_secret}"
  $tenantId = "${var.tenant_id}"
  $spId = "${each.value.object_id}"

  az login --service-principal -u $clientId -p $clientSecret --tenant $tenantId --only-show-errors | Out-Null
  $assignments = az rest --method GET --uri "https://graph.microsoft.com/v1.0/servicePrincipals/$spId/appRoleAssignedTo" | ConvertFrom-Json
  $groupNames = $assignments.value | Where-Object { $_.principalType -eq "Group" } | Select-Object -ExpandProperty principalDisplayName
  @{ "existing_groups" = ($groupNames -join ",") } | ConvertTo-Json
  EOT
  ]
}

# Calculate groups to assign
locals {
  groups_to_assign = {
    for app_name, app in data.azuread_service_principal.enterprise_apps : app_name => {
      groups = [
        for group in local.group_names : group
        if !contains(
          split(",", data.external.existing_assignments[app_name].result.existing_groups),
          group
        )
      ]
    }
  }
}

# Create role assignments only for new groups
resource "azuread_app_role_assignment" "safe_assignments" {
  for_each = {
    for pair in setproduct(local.group_names, local.app_names_list) : 
    "${pair[0]}-${pair[1]}" => {
      group = pair[0],
      app   = pair[1]
    } 
    if contains(local.groups_to_assign[pair[1]].groups, pair[0])
  }

  principal_object_id  = data.azuread_group.groups[each.value.group].object_id
  resource_object_id   = data.azuread_service_principal.enterprise_apps[each.value.app].object_id
  app_role_id          = data.azuread_service_principal.enterprise_apps[each.value.app].app_roles[0].id

  lifecycle {
    ignore_changes = [principal_object_id, resource_object_id, app_role_id]
  }
}
import requests
import json
import sys
import os
from msal import ConfidentialClientApplication

def get_access_token():
    """Get Microsoft Graph API access token using MSAL."""
    # These values would typically come from environment variables
    tenant_id = os.environ.get('AZURE_TENANT_ID')
    client_id = os.environ.get('AZURE_CLIENT_ID')
    client_secret = os.environ.get('AZURE_CLIENT_SECRET')
    
    if not all([tenant_id, client_id, client_secret]):
        print("Missing required environment variables for authentication.")
        print("Please set: AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET")
        sys.exit(1)
    
    # Initialize the MSAL client
    app = ConfidentialClientApplication(
        client_id=client_id,
        client_credential=client_secret,
        authority=f"https://login.microsoftonline.com/{tenant_id}"
    )
    
    # Acquire token for Microsoft Graph
    scopes = ['https://graph.microsoft.com/.default']
    result = app.acquire_token_for_client(scopes=scopes)
    
    if 'access_token' not in result:
        print(f"Error getting access token: {result.get('error_description', '')}")
        sys.exit(1)
    
    return result['access_token']

def make_graph_request(endpoint, token, method='GET', data=None, params=None):
    """Make a request to Microsoft Graph API."""
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    url = f'https://graph.microsoft.com/v1.0/{endpoint}'
    
    try:
        if method == 'GET':
            response = requests.get(url, headers=headers, params=params)
        elif method == 'POST':
            response = requests.post(url, headers=headers, json=data)
        
        response.raise_for_status()
        
        if response.status_code == 204:  # No content
            return {}
        
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error making request to {url}: {e}")
        if hasattr(e, 'response') and e.response is not None:
            print(f"Response content: {e.response.text}")
        sys.exit(1)

def get_service_principals(token):
    """Get service principals that start with 'ADP Azure' or 'ADP AWS'."""
    apps = []
    next_link = 'servicePrincipals'
    
    while next_link:
        params = {
            '$select': 'displayName,id,appRoles',
            '$filter': "startsWith(displayName, 'ADP Azure') or startsWith(displayName, 'ADP AWS')"
        }
        
        # Handle pagination
        if '?' in next_link:
            # This is a full URL with query parameters
            url_parts = next_link.split('?')
            next_link = url_parts[0].replace('https://graph.microsoft.com/v1.0/', '')
            params = {}
        
        response = make_graph_request(next_link, token, params=params)
        
        if 'value' in response:
            apps.extend(response['value'])
        
        # Get the next page if available
        next_link = response.get('@odata.nextLink', '').replace('https://graph.microsoft.com/v1.0/', '')
        if not next_link:
            break
    
    return apps

def get_group_id(group_name, token):
    """Get the object ID for a group by its display name."""
    params = {
        '$filter': f"displayName eq '{group_name}'",
        '$select': 'id'
    }
    
    response = make_graph_request('groups', token, params=params)
    
    if not response.get('value'):
        print(f"Group not found: {group_name}")
        return None
    
    return response['value'][0]['id']

def create_app_role_assignment(group_id, role_id, resource_id, token):
    """Create an app role assignment for a group."""
    endpoint = f'groups/{group_id}/appRoleAssignments'
    
    data = {
        "principalId": group_id,
        "resourceId": resource_id,
        "appRoleId": role_id
    }
    
    try:
        return make_graph_request(endpoint, token, method='POST', data=data)
    except Exception as e:
        print(f"Error creating role assignment: {e}")
        return None

def main():
    # 1. Get authentication token
    token = get_access_token()
    
    # 2. Get app service principals
    print("Fetching service principals...")
    apps = get_service_principals(token)
    
    if not apps:
        print("No matching service principals found")
        sys.exit(0)
    
    print(f"Found {len(apps)} matching service principals")
    
    # 3. Read group names from config file
    try:
        with open('groups.config', 'r') as f:
            group_names = [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        print("Config file 'groups.config' not found")
        sys.exit(1)
    
    if not group_names:
        print("No group names found in config file")
        sys.exit(1)
    
    # 4. Get group IDs
    print("Fetching group IDs...")
    group_ids = {}
    for name in group_names:
        group_id = get_group_id(name, token)
        if group_id:
            group_ids[name] = group_id
    
    if not group_ids:
        print("No valid groups found")
        sys.exit(1)
    
    # 5. Create role assignments
    for app in apps:
        app_name = app['displayName']
        sp_id = app['id']  # In Graph API, it's 'id' not 'objectId'
        app_roles = app.get('appRoles', [])
        
        if not app_roles:
            print(f"No app roles found for {app_name}")
            continue
        
        first_role_id = app_roles[0]['id']
        
        for group_name, group_id in group_ids.items():
            print(f"Assigning {app_name} role to {group_name}")
            result = create_app_role_assignment(group_id, first_role_id, sp_id, token)
            
            if result:
                print(f"Successfully assigned role for {app_name} to {group_name}")
            else:
                print(f"Failed to assign role for {app_name} to {group_name}")

if __name__ == "__main__":
    main()
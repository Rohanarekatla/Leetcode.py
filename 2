# locals.tf
locals {
  # Create a map with primary as the key to ensure uniqueness
  failover_groups = {
    for fg in data.snowflake_failover_groups.existing.failover_groups :
    fg.primary => {
      name             = split("|", fg.primary)[length(split("|", fg.primary)) - 1]
      allowed_accounts = fg.allowed_accounts
      object_types     = fg.object_types
      replication_schedule = fg.replication_schedule
      primary         = fg.primary
    }
  }
}

# failover_groups.tf
resource "snowflake_failover_group" "managed_groups" {
  for_each = local.failover_groups

  name             = each.value.name
  allowed_accounts = each.value.allowed_accounts
  object_types     = each.value.object_types

  replication_schedule {
    cron {
      expression = each.value.replication_schedule.cron.expression
      time_zone  = each.value.replication_schedule.cron.time_zone
    }
  }
}

# outputs.tf
output "failover_group_details" {
  description = "Details of all failover groups"
  value = {
    for primary, group in local.failover_groups : primary => {
      name             = group.name
      allowed_accounts = group.allowed_accounts
      object_types     = group.object_types
    }
  }
}

output "primary_mappings" {
  description = "Mapping of primary values to group names"
  value = {
    for primary, group in local.failover_groups : primary => group.name
  }
}
Let me provide an even simpler script that just takes the app name as a command line argument:

```python
import requests
import sys
import os
from msal import ConfidentialClientApplication

def get_token():
    tenant_id = os.environ.get('AZURE_TENANT_ID')
    client_id = os.environ.get('AZURE_CLIENT_ID')
    client_secret = os.environ.get('AZURE_CLIENT_SECRET')
    app = ConfidentialClientApplication(client_id, client_secret, f"https://login.microsoftonline.com/{tenant_id}")
    result = app.acquire_token_for_client(scopes=['https://graph.microsoft.com/.default'])
    return result.get('access_token')

def req(endpoint, token, method='GET', data=None, params=None):
    url = f'https://graph.microsoft.com/v1.0/{endpoint}'
    headers = {'Authorization': f'Bearer {token}', 'Content-Type': 'application/json'}
    try:
        if method == 'GET':
            resp = requests.get(url, headers=headers, params=params)
        else:
            resp = requests.post(url, headers=headers, json=data)
        resp.raise_for_status()
        return {} if resp.status_code == 204 else resp.json()
    except:
        return {}

def get_app(name, token):
    params = {'$select': 'displayName,id,appRoles', '$filter': f"displayName eq '{name}'"}
    resp = req('servicePrincipals', token, params=params)
    return resp.get('value', [])[0] if resp.get('value') else None

def get_groups():
    try:
        with open('groups.config', 'r') as f:
            return [line.replace("read", "").replace("write", "").strip() for line in f if line.strip()]
    except:
        return []

def get_group_id(name, token):
    params = {'$filter': f"displayName eq '{name}'", '$select': 'id'}
    resp = req('groups', token, params=params)
    return resp.get('value', [{}])[0].get('id') if resp.get('value') else None

def assign_role(group_id, role_id, sp_id, token):
    data = {"principalId": group_id, "resourceId": sp_id, "appRoleId": role_id}
    return req(f'groups/{group_id}/appRoleAssignments', token, 'POST', data)

def main():
    if len(sys.argv) < 2:
        return
    
    token = get_token()
    if not token:
        return
    
    app = get_app(sys.argv[1], token)
    if not app or not app.get('appRoles'):
        return
    
    role_id = app['appRoles'][0]['id']
    sp_id = app['id']
    
    for group_name in get_groups():
        group_id = get_group_id(group_name, token)
        if group_id:
            assign_role(group_id, role_id, sp_id, token)

if __name__ == "__main__":
    main()
```

This script:
1. Takes the app name from `sys.argv[1]`
2. Gets an access token
3. Finds the service principal with the given name
4. Reads groups from groups.config
5. For each group, assigns the first app role from the service principal
6. Has minimal error handling and no output​​​​​​​​​​​​​​​​
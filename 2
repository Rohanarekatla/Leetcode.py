# Ensure we get a clean list of existing groups from external data
locals {
  existing_assignments = {
    for app_name, app in data.azuread_service_principal.enterprise_apps :
    app_name => split(",", lookup(data.external.existing_assignments[app_name].result, "existing_groups", ""))
  }

  groups_to_assign = {
    for app_name, app in data.azuread_service_principal.enterprise_apps : app_name => {
      groups = [
        for group in local.group_names : group
        if !contains(local.existing_assignments[app_name], group) # Only assign if not already present
      ]
    }
  }
}

# Create role assignments only for new groups
resource "azuread_app_role_assignment" "safe_assignments" {
  for_each = {
    for pair in setproduct(local.group_names, local.app_names_list) : 
    "${pair[0]}-${pair[1]}" => {
      group = pair[0],
      app   = pair[1]
    } 
    if contains(local.groups_to_assign[pair[1]].groups, pair[0])
  }

  principal_object_id  = data.azuread_group.groups[each.value.group].object_id
  resource_object_id   = data.azuread_service_principal.enterprise_apps[each.value.app].object_id
  app_role_id          = data.azuread_service_principal.enterprise_apps[each.value.app].app_roles[0].id

  lifecycle {
    prevent_destroy = true
  }
}
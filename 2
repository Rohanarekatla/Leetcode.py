Here's the modified script with only a single input using sys.argv[1]:

```python
import requests
import json
import sys
import os
from msal import ConfidentialClientApplication

def get_access_token():
    tenant_id = os.environ.get('AZURE_TENANT_ID')
    client_id = os.environ.get('AZURE_CLIENT_ID')
    client_secret = os.environ.get('AZURE_CLIENT_SECRET')
    
    if not all([tenant_id, client_id, client_secret]):
        sys.exit(1)
    
    app = ConfidentialClientApplication(
        client_id=client_id,
        client_credential=client_secret,
        authority=f"https://login.microsoftonline.com/{tenant_id}"
    )
    
    result = app.acquire_token_for_client(scopes=['https://graph.microsoft.com/.default'])
    
    if 'access_token' not in result:
        sys.exit(1)
    
    return result['access_token']

def make_graph_request(endpoint, token, method='GET', data=None, params=None):
    headers = {'Authorization': f'Bearer {token}', 'Content-Type': 'application/json'}
    url = f'https://graph.microsoft.com/v1.0/{endpoint}'
    
    try:
        if method == 'GET':
            response = requests.get(url, headers=headers, params=params)
        elif method == 'POST':
            response = requests.post(url, headers=headers, json=data)
        
        response.raise_for_status()
        return {} if response.status_code == 204 else response.json()
    except:
        sys.exit(1)

def get_service_principals_by_names(app_names, token):
    matching_apps = []
    
    for app_name in app_names:
        params = {'$select': 'displayName,id,appRoles', '$filter': f"displayName eq '{app_name}'"}
        response = make_graph_request('servicePrincipals', token, params=params)
        
        if 'value' in response and response['value']:
            matching_apps.extend(response['value'])
    
    return matching_apps

def get_existing_app_role_assignments(group_id, token):
    return make_graph_request(f'groups/{group_id}/appRoleAssignments', token)

def check_if_assignment_exists(group_id, role_id, resource_id, token):
    assignments = get_existing_app_role_assignments(group_id, token).get('value', [])
    
    for assignment in assignments:
        if assignment.get('appRoleId') == role_id and assignment.get('resourceId') == resource_id:
            return True
    
    return False

def create_app_role_assignment(group_id, role_id, resource_id, token):
    if check_if_assignment_exists(group_id, role_id, resource_id, token):
        return {"status": "skipped"}
    
    data = {"principalId": group_id, "resourceId": resource_id, "appRoleId": role_id}
    
    try:
        return make_graph_request(f'groups/{group_id}/appRoleAssignments', token, method='POST', data=data)
    except:
        return None

def get_group_id(group_name, token):
    params = {'$filter': f"displayName eq '{group_name}'", '$select': 'id'}
    response = make_graph_request('groups', token, params=params)
    
    if not response.get('value'):
        return None
    
    return response['value'][0]['id']

def process_group_config_file(filename):
    try:
        with open(filename, 'r') as f:
            content = f.read()
        lines = content.split("\n")
        filtered_lines = [line for line in lines if line.strip() != ""]
        return [line.replace("read", "").replace("write", "").strip() for line in filtered_lines]
    except:
        sys.exit(1)

def main():
    if len(sys.argv) < 2:
        sys.exit(1)
    
    app_name = sys.argv[1]
    token = get_access_token()
    
    apps = get_service_principals_by_names([app_name], token)
    if not apps:
        sys.exit(0)
    
    group_names = process_group_config_file('groups.config')
    
    group_ids = {}
    for name in group_names:
        group_id = get_group_id(name, token)
        if group_id:
            group_ids[name] = group_id
    
    if not group_ids:
        sys.exit(1)
    
    for app in apps:
        app_name = app['displayName']
        sp_id = app['id']
        app_roles = app.get('appRoles', [])
        
        if not app_roles:
            continue
        
        first_role_id = app_roles[0]['id']
        
        for group_id in group_ids.values():
            create_app_role_assignment(group_id, first_role_id, sp_id, token)

if __name__ == "__main__":
    main()
```
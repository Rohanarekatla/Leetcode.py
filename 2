from azure.identity import ClientSecretCredential
import requests
import json

# Service Principal (SPN) Credentials
tenant_id = "<YOUR_TENANT_ID>"
client_id = "<YOUR_CLIENT_ID>"
client_secret = "<YOUR_CLIENT_SECRET>"

# Microsoft Graph API Endpoints
graph_url = "https://graph.microsoft.com/v1.0"
snowflake_template_name = "Snowflake"  # Name of the template in Entra gallery

# Authenticate to get an access token
credentials = ClientSecretCredential(
    tenant_id=tenant_id,
    client_id=client_id,
    client_secret=client_secret
)
token = credentials.get_token("https://graph.microsoft.com/.default").token

def find_snowflake_template_id():
    # Get all application templates
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.get(f"{graph_url}/applicationTemplates", headers=headers)
    response.raise_for_status()
    
    templates = response.json().get("value", [])
    for template in templates:
        if template["displayName"] == snowflake_template_name:
            return template["id"]
    raise ValueError(f"Template '{snowflake_template_name}' not found in Entra gallery")

def create_enterprise_app(app_name, template_id):
    # Instantiate the template to create the Enterprise App
    url = f"{graph_url}/applicationTemplates/{template_id}/instantiate"
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    payload = {
        "displayName": app_name
    }
    
    response = requests.post(url, headers=headers, json=payload)
    response.raise_for_status()
    return response.json()

if __name__ == "__main__":
    try:
        # Get user input for app name
        app_name = input("Enter the name for the Snowflake Enterprise Application: ")
        
        # Find Snowflake template ID
        template_id = find_snowflake_template_id()
        print(f"Found Snowflake template ID: {template_id}")
        
        # Create the Enterprise App
        result = create_enterprise_app(app_name, template_id)
        print("Enterprise Application created successfully!")
        print(json.dumps(result, indent=2))
        
    except Exception as e:
        print(f"Error: {str(e)}")